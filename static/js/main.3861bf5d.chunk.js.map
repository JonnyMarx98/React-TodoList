{"version":3,"sources":["logo.svg","Todo.js","TodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","props","state","isEditing","task","completed","handleRemove","bind","handleChange","handleEdit","handleCompleted","toggleForm","evt","this","toggleCompleted","id","remove","preventDefault","edit","setState","target","name","value","className","onSubmit","type","onChange","onClick","Component","TodoForm","handleSubmit","addItem","htmlFor","placeholder","TodoList","items","editItem","removeItem","updatedItems","map","item","newItem","uuid","st","newTask","filter","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3861bf5d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\r\nimport './Todo.css'\r\n\r\nclass Todo extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            task: this.props.task,\r\n            completed: this.props.completed\r\n        }\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleCompleted = this.handleCompleted.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n    }\r\n\r\n    handleCompleted(evt){\r\n        this.props.toggleCompleted(this.props.id)\r\n    }\r\n\r\n    handleRemove(evt){\r\n        this.props.remove(this.props.id);\r\n    }\r\n\r\n    handleEdit(evt){\r\n        evt.preventDefault()\r\n        this.props.edit(this.props.id, this.state.task);\r\n        this.toggleForm();\r\n    }\r\n\r\n    toggleForm(){\r\n        this.setState({isEditing: !this.state.isEditing});\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let result;\r\n        if(this.state.isEditing){\r\n            result =\r\n            <div className=\"Todo\">\r\n                <form className='Todo-edit-form' onSubmit={this.handleEdit}>\r\n                    <input\r\n                    type='text'\r\n                    name='task'\r\n                    onChange={this.handleChange}\r\n                    value={this.state.task}\r\n                    />\r\n                    <button>✔️</button>\r\n                </form>\r\n                \r\n            </div>\r\n        } else {\r\n            result = \r\n            <div className=\"Todo\">\r\n                <li\r\n                onClick={this.handleCompleted} \r\n                className={this.props.completed\r\n                ? \"Todo-task completed\"\r\n                : \"Todo-task\"\r\n                }>{this.props.task}</li>\r\n                <div className='Todo-buttons'>\r\n                    <button onClick={this.toggleForm}>\r\n                        <i className='fas fa-pen'/>\r\n                    </button>\r\n                    <button onClick={this.handleRemove}>\r\n                        <i className='fas fa-trash'/>\r\n                    </button>\r\n                </div>\r\n                \r\n            </div>\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport './TodoForm.css';\r\n\r\nclass TodoForm extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            task: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        this.props.addItem(this.state);\r\n        this.setState({\r\n            task: ''\r\n        })\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <form className='TodoForm' onSubmit={this.handleSubmit}>\r\n                <label htmlFor='task'>Task: </label>\r\n                <input\r\n                id='task'\r\n                name='task'\r\n                placeholder='New Todo'\r\n                value={this.state.task}\r\n                onChange={this.handleChange}\r\n                />\r\n                <button>Add Todo</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoForm;","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm';\r\nimport uuid from 'uuid/v4';\r\nimport './TodoList.css'\r\n\r\nclass TodoList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            items: []\r\n        }\r\n        this.addItem = this.addItem.bind(this);\r\n        this.editItem = this.editItem.bind(this);\r\n        this.removeItem = this.removeItem.bind(this);\r\n        this.toggleCompleted = this.toggleCompleted.bind(this);\r\n    }\r\n\r\n    toggleCompleted(id){\r\n        let updatedItems = this.state.items.map(\r\n            item => {\r\n                if(item.id === id){\r\n                    return {...item, completed: !item.completed}\r\n                }\r\n                return item;\r\n            }\r\n        )\r\n\r\n        this.setState({items: updatedItems})\r\n    }\r\n\r\n    addItem(item){\r\n        let newItem = {...item, id: uuid(), completed: false}\r\n        this.setState(st => (\r\n            {items: [...st.items, newItem]}\r\n            ));\r\n    }\r\n\r\n    editItem(id, newTask){\r\n        let updatedItems = this.state.items.map(\r\n            item => {\r\n                if(item.id === id){\r\n                    return {...item, task: newTask}\r\n                }\r\n                return item;\r\n            }\r\n        )\r\n\r\n        this.setState({items: updatedItems})\r\n\r\n    }\r\n\r\n    removeItem(id){\r\n        this.setState(st => (\r\n            {items: st.items.filter(\r\n                item => item.id !== id\r\n            )}\r\n        ));\r\n    }\r\n\r\n    render(){\r\n        let items = this.state.items.map(item => (\r\n            <Todo\r\n            key={item.id}\r\n            id={item.id}\r\n            task={item.task}\r\n            completed={item.completed}\r\n            remove={this.removeItem}\r\n            edit={this.editItem}\r\n            toggleCompleted={this.toggleCompleted}\r\n            />\r\n        ))\r\n        return(\r\n            <div className=\"TodoList\">\r\n                <h1>\r\n                    Todo List <span>A Simple React Todo List App</span></h1>\r\n                <ul>\r\n                    {items}\r\n                </ul>\r\n                <TodoForm addItem={this.addItem}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TodoList from './TodoList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}